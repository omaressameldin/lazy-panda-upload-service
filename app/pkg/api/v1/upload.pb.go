// Code generated by protoc-gen-go. DO NOT EDIT.
// source: upload.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UploadStatusCode int32

const (
	UploadStatusCode_Unknown UploadStatusCode = 0
	UploadStatusCode_Ok      UploadStatusCode = 1
	UploadStatusCode_Failed  UploadStatusCode = 2
)

var UploadStatusCode_name = map[int32]string{
	0: "Unknown",
	1: "Ok",
	2: "Failed",
}

var UploadStatusCode_value = map[string]int32{
	"Unknown": 0,
	"Ok":      1,
	"Failed":  2,
}

func (x UploadStatusCode) String() string {
	return proto.EnumName(UploadStatusCode_name, int32(x))
}

func (UploadStatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_91b94b655bd2a7e5, []int{0}
}

type File struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b94b655bd2a7e5, []int{0}
}

func (m *File) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_File.Unmarshal(m, b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_File.Marshal(b, m, deterministic)
}
func (m *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(m, src)
}
func (m *File) XXX_Size() int {
	return xxx_messageInfo_File.Size(m)
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type UploadStatusResponse struct {
	Api                  string           `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	Message              string           `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Code                 UploadStatusCode `protobuf:"varint,3,opt,name=Code,proto3,enum=v1.UploadStatusCode" json:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UploadStatusResponse) Reset()         { *m = UploadStatusResponse{} }
func (m *UploadStatusResponse) String() string { return proto.CompactTextString(m) }
func (*UploadStatusResponse) ProtoMessage()    {}
func (*UploadStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b94b655bd2a7e5, []int{1}
}

func (m *UploadStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadStatusResponse.Unmarshal(m, b)
}
func (m *UploadStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadStatusResponse.Marshal(b, m, deterministic)
}
func (m *UploadStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadStatusResponse.Merge(m, src)
}
func (m *UploadStatusResponse) XXX_Size() int {
	return xxx_messageInfo_UploadStatusResponse.Size(m)
}
func (m *UploadStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadStatusResponse proto.InternalMessageInfo

func (m *UploadStatusResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *UploadStatusResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UploadStatusResponse) GetCode() UploadStatusCode {
	if m != nil {
		return m.Code
	}
	return UploadStatusCode_Unknown
}

func init() {
	proto.RegisterEnum("v1.UploadStatusCode", UploadStatusCode_name, UploadStatusCode_value)
	proto.RegisterType((*File)(nil), "v1.File")
	proto.RegisterType((*UploadStatusResponse)(nil), "v1.UploadStatusResponse")
}

func init() { proto.RegisterFile("upload.proto", fileDescriptor_91b94b655bd2a7e5) }

var fileDescriptor_91b94b655bd2a7e5 = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x50, 0x5d, 0x6b, 0xc2, 0x30,
	0x14, 0x5d, 0xaa, 0xd4, 0xed, 0xce, 0x8d, 0x10, 0x7c, 0x08, 0xbe, 0xac, 0xf8, 0x54, 0xf6, 0x50,
	0x51, 0x7f, 0xc0, 0x1e, 0x06, 0xbe, 0x8d, 0x41, 0x87, 0x3f, 0x20, 0xda, 0xbb, 0x12, 0x8c, 0xb9,
	0xc1, 0xa4, 0xdd, 0xdf, 0x1f, 0x89, 0x2b, 0x8c, 0xbe, 0xe5, 0x7c, 0xe4, 0x1c, 0xce, 0x85, 0x79,
	0xe7, 0x0c, 0xa9, 0xa6, 0x72, 0x57, 0x0a, 0x24, 0xb2, 0x7e, 0xb3, 0x7c, 0x69, 0x89, 0x5a, 0x83,
	0xeb, 0xc4, 0x1c, 0xbb, 0xef, 0x75, 0xd0, 0x17, 0xf4, 0x41, 0x5d, 0xdc, 0xcd, 0xb4, 0x2a, 0x60,
	0xba, 0xd7, 0x06, 0x85, 0x84, 0xd9, 0x89, 0x6c, 0x40, 0x1b, 0x24, 0x2b, 0x58, 0x39, 0xaf, 0x07,
	0xb8, 0x32, 0xb0, 0x38, 0xa4, 0xd8, 0xaf, 0xa0, 0x42, 0xe7, 0x6b, 0xf4, 0x8e, 0xac, 0x47, 0xc1,
	0x61, 0xa2, 0x9c, 0x4e, 0xee, 0x87, 0x3a, 0x3e, 0x63, 0xc6, 0x07, 0x7a, 0xaf, 0x5a, 0x94, 0x59,
	0x62, 0x07, 0x28, 0x4a, 0x98, 0xbe, 0x53, 0x83, 0x72, 0x52, 0xb0, 0xf2, 0x79, 0xbb, 0xa8, 0xfa,
	0x4d, 0xf5, 0x3f, 0x33, 0x6a, 0x75, 0x72, 0xbc, 0xee, 0x80, 0x8f, 0x15, 0xf1, 0x08, 0xb3, 0x83,
	0x3d, 0x5b, 0xfa, 0xb1, 0xfc, 0x4e, 0xe4, 0x90, 0x7d, 0x9e, 0x39, 0x13, 0x00, 0xf9, 0x5e, 0x69,
	0x83, 0x0d, 0xcf, 0xb6, 0x6f, 0xf0, 0xf4, 0xf7, 0x09, 0xaf, 0xbd, 0x3e, 0xa1, 0xa8, 0x20, 0xbf,
	0x11, 0xe2, 0x3e, 0x76, 0xc5, 0x85, 0x4b, 0x39, 0x6e, 0x1d, 0x96, 0x94, 0xec, 0x98, 0xa7, 0x63,
	0xec, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x69, 0x93, 0x8e, 0xc2, 0x41, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UploadServiceClient is the client API for UploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UploadServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (UploadService_UploadClient, error)
}

type uploadServiceClient struct {
	cc *grpc.ClientConn
}

func NewUploadServiceClient(cc *grpc.ClientConn) UploadServiceClient {
	return &uploadServiceClient{cc}
}

func (c *uploadServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (UploadService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UploadService_serviceDesc.Streams[0], "/v1.UploadService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &uploadServiceUploadClient{stream}
	return x, nil
}

type UploadService_UploadClient interface {
	Send(*File) error
	CloseAndRecv() (*UploadStatusResponse, error)
	grpc.ClientStream
}

type uploadServiceUploadClient struct {
	grpc.ClientStream
}

func (x *uploadServiceUploadClient) Send(m *File) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uploadServiceUploadClient) CloseAndRecv() (*UploadStatusResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UploadServiceServer is the server API for UploadService service.
type UploadServiceServer interface {
	Upload(UploadService_UploadServer) error
}

func RegisterUploadServiceServer(s *grpc.Server, srv UploadServiceServer) {
	s.RegisterService(&_UploadService_serviceDesc, srv)
}

func _UploadService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UploadServiceServer).Upload(&uploadServiceUploadServer{stream})
}

type UploadService_UploadServer interface {
	SendAndClose(*UploadStatusResponse) error
	Recv() (*File, error)
	grpc.ServerStream
}

type uploadServiceUploadServer struct {
	grpc.ServerStream
}

func (x *uploadServiceUploadServer) SendAndClose(m *UploadStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uploadServiceUploadServer) Recv() (*File, error) {
	m := new(File)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UploadService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.UploadService",
	HandlerType: (*UploadServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _UploadService_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "upload.proto",
}
